<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-03-21T21:01:52+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NicoDora</title><author><name>NicoDora</name></author><entry><title type="html">NestJS를 선택한 이유 (NestJS란?)</title><link href="http://localhost:4000/nestjs/2024/03/21/%EC%B2%AB-NestJS-%EA%B2%8C%EC%8B%9C%EA%B8%80.html" rel="alternate" type="text/html" title="NestJS를 선택한 이유 (NestJS란?)" /><published>2024-03-21T20:04:00+09:00</published><updated>2024-03-21T20:04:00+09:00</updated><id>http://localhost:4000/nestjs/2024/03/21/%EC%B2%AB-NestJS-%EA%B2%8C%EC%8B%9C%EA%B8%80</id><content type="html" xml:base="http://localhost:4000/nestjs/2024/03/21/%EC%B2%AB-NestJS-%EA%B2%8C%EC%8B%9C%EA%B8%80.html"><![CDATA[<p>NestJS는 효율적이고 확장 가능한 Node.js 서버 측 응용 프로그램을 구축하기 위한 프레임워크입니다. 진보적인 자바스크립트를 사용하고, TypeScript로 구축되어 있으며 완전히 지원합니다(그러나 여전히 개발자들은 순수한 자바스크립트로 코딩할 수 있습니다), <u>OOP(Object Oriented Programming)</u><sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, FP(Functional Programming), FRP(Functional Reactive Programming)의 요소를 결합합니다.</p>

<p>후드 아래에서 네스트는 Express(기본값)와 같은 강력한 HTTP 서버 프레임워크를 사용하며 선택적으로 Fastify도 사용하도록 구성할 수 있습니다!</p>

<p>Nest는 이러한 공통 Node.js 프레임워크(Express/Fastify) 이상의 추상화 수준을 제공하지만 API를 개발자에게 직접 노출합니다. 이를 통해 개발자는 기본 플랫폼에서 사용할 수 있는 수많은 타사 모듈을 자유롭게 사용할 수 있습니다.
<br />
<br /></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>객체 지향 프로그래밍(Object Oriented Programming, OOP)은 컴퓨터 프로그래밍의 패러다임 중 하나로, 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 “객체”들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고 데이터를 처리할 수 있다. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>NicoDora</name></author><category term="nestjs" /><summary type="html"><![CDATA[NestJS가 무엇인지 알아보고 Modern-Agile 6기 메인 프로젝트에서 왜 NestJS를 채택했는지 알아봅시다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/2024-03-21-%EC%B2%AB-NestJS-%EA%B2%8C%EC%8B%9C%EA%B8%80/nestjs-logo.png" /><media:content medium="image" url="http://localhost:4000/assets/img/2024-03-21-%EC%B2%AB-NestJS-%EA%B2%8C%EC%8B%9C%EA%B8%80/nestjs-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The first test post</title><link href="http://localhost:4000/incomplete/2024/03/19/The-first-test-post.html" rel="alternate" type="text/html" title="The first test post" /><published>2024-03-19T21:31:00+09:00</published><updated>2024-03-19T21:31:00+09:00</updated><id>http://localhost:4000/incomplete/2024/03/19/The-first-test-post</id><content type="html" xml:base="http://localhost:4000/incomplete/2024/03/19/The-first-test-post.html"><![CDATA[<p>안녕하세요?</p>

<p>첫 포스트입니다.
<br />
<br /></p>

<p><img src="/assets/img/2024-03-19-The-first-test-post/test1.jpeg" alt="test1" />
<br />
<br /></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// file: "test.ts"</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span><span class="p">,</span> <span class="nx">NotFoundException</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@nestjs/common</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">EntityManager</span><span class="p">,</span> <span class="nx">FindManyOptions</span><span class="p">,</span> <span class="nx">FindOneOptions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">typeorm</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">plainToInstance</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">class-transformer</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">QueryDeepPartialEntity</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">typeorm/query-builder/QueryPartialEntity</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/auth/enums/user-provider.enum</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserInfo</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/auth/interfaces/user-info.interface</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserBadgeRepository</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/repositories/user-badge.repository</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserIntroRepository</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/repositories/user-intro.repository</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyIntroDto</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/dtos/get-my-intro.dto</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyProfileResponseDTO</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/dtos/get-my-profile.dto</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserBadgeResponseDTO</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/dtos/get-user-badge.dto</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserImageRepository</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/repositories/user-image.repository</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserRepository</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/repositories/user.repository</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">User</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/entities/User</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">userRepository</span><span class="p">:</span> <span class="nx">UserRepository</span><span class="p">,</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">userImageRepository</span><span class="p">:</span> <span class="nx">UserImageRepository</span><span class="p">,</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">userBadgeRepository</span><span class="p">:</span> <span class="nx">UserBadgeRepository</span><span class="p">,</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">userIntroRepository</span><span class="p">:</span> <span class="nx">UserIntroRepository</span><span class="p">,</span>
  <span class="p">)</span> <span class="p">{}</span>

  <span class="nf">findAll</span><span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">FindManyOptions</span><span class="o">&lt;</span><span class="nx">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">findAll</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nf">findUser</span><span class="p">(</span><span class="nx">uniqueId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">provider</span><span class="p">:</span> <span class="nx">UserProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">findUser</span><span class="p">(</span><span class="nx">uniqueId</span><span class="p">,</span> <span class="nx">provider</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">findOneByQueryBuilderOrNotFound</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">User</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">existUser</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">findOneByQueryBuilder</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>

    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">existUser</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">NotFoundException</span><span class="p">(</span><span class="dl">'</span><span class="s1">해당 유저를 찾지 못했습니다.</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">existUser</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nf">findOneAndSelectAllByQueryBuilder</span><span class="p">(</span><span class="nx">email</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">provider</span><span class="p">:</span> <span class="nx">UserProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">findOneAndSelectAllByQueryBuilder</span><span class="p">(</span>
      <span class="nx">email</span><span class="p">,</span>
      <span class="nx">provider</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="nf">findOne</span><span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">FindOneOptions</span><span class="o">&lt;</span><span class="nx">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">findOne</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">findOneByOrNotFound</span><span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">FindOneOptions</span><span class="o">&lt;</span><span class="nx">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">existUser</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nf">findOne</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>

    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">existUser</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">NotFoundException</span><span class="p">(</span><span class="dl">'</span><span class="s1">해당 유저를 찾지 못했습니다.</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">existUser</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nf">createUser</span><span class="p">(</span><span class="nx">entityManager</span><span class="p">:</span> <span class="nx">EntityManager</span><span class="p">,</span> <span class="nx">userInfo</span><span class="p">:</span> <span class="nx">UserInfo</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">createUser</span><span class="p">(</span><span class="nx">entityManager</span><span class="p">,</span> <span class="nx">userInfo</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">getMyProfile</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">userInfo</span> <span class="o">=</span> <span class="nf">plainToInstance</span><span class="p">(</span>
      <span class="nx">MyProfileResponseDTO</span><span class="p">,</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">getUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">),</span>
    <span class="p">);</span>
    <span class="kd">const</span> <span class="nx">intro</span> <span class="o">=</span> <span class="nf">plainToInstance</span><span class="p">(</span>
      <span class="nx">MyIntroDto</span><span class="p">,</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userIntroRepository</span><span class="p">.</span><span class="nf">getUserIntro</span><span class="p">(</span><span class="nx">userId</span><span class="p">),</span>
    <span class="p">)[</span><span class="mi">0</span><span class="p">];</span>

    <span class="kd">const</span> <span class="nx">image</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userImageRepository</span><span class="p">.</span><span class="nf">findUserImage</span><span class="p">(</span><span class="nx">userId</span><span class="p">))</span>
      <span class="p">.</span><span class="nx">imageUrl</span><span class="p">;</span>

    <span class="k">return</span> <span class="p">{</span> <span class="p">...</span><span class="nx">userInfo</span><span class="p">,</span> <span class="nx">image</span><span class="p">,</span> <span class="nx">intro</span> <span class="p">};</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">getMyRank</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">rank</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">getUserRank</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">badge</span> <span class="o">=</span> <span class="nf">plainToInstance</span><span class="p">(</span>
      <span class="nx">UserBadgeResponseDTO</span><span class="p">,</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userBadgeRepository</span><span class="p">.</span><span class="nf">getUserBadges</span><span class="p">(</span><span class="nx">userId</span><span class="p">),</span>
    <span class="p">);</span>

    <span class="k">return</span> <span class="p">{</span> <span class="nx">rank</span><span class="p">,</span> <span class="nx">badge</span> <span class="p">};</span>
  <span class="p">}</span>

  <span class="nf">getUserInfo</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">getUserInfo</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">getMyInfoWithOwner</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">targetId</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">email</span><span class="p">,</span> <span class="nx">role</span><span class="p">,</span> <span class="nx">provider</span> <span class="p">}</span> <span class="o">=</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">getUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">userImage</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userImageRepository</span><span class="p">.</span><span class="nf">findUserImage</span><span class="p">(</span><span class="nx">userId</span><span class="p">))</span>
      <span class="p">.</span><span class="nx">imageUrl</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="nx">userId</span><span class="p">,</span>
      <span class="nx">name</span><span class="p">,</span>
      <span class="nx">email</span><span class="p">,</span>
      <span class="nx">role</span><span class="p">,</span>
      <span class="nx">provider</span><span class="p">,</span>
      <span class="nx">userImage</span><span class="p">,</span>
      <span class="na">owner</span><span class="p">:</span> <span class="nx">userId</span> <span class="o">===</span> <span class="nx">targetId</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="nf">updateUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">partialEntity</span><span class="p">:</span> <span class="nx">QueryDeepPartialEntity</span><span class="o">&lt;</span><span class="nx">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">updateUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">,</span> <span class="nx">partialEntity</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">countPageMentors</span><span class="p">(</span><span class="nx">categoryId</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">limit</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">categoryId</span>
      <span class="p">?</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">countMentorsInCategory</span><span class="p">(</span><span class="nx">categoryId</span><span class="p">)</span>
      <span class="p">:</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">countMentors</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">total</span> <span class="o">/</span> <span class="nx">limit</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">totalPage</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="nx">page</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">{</span> <span class="nx">total</span><span class="p">,</span> <span class="nx">totalPage</span> <span class="p">};</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>NicoDora</name></author><category term="incomplete" /><summary type="html"><![CDATA[첫 포스트 테스트 중]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/2024-03-19-The-first-test-post/test1.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/2024-03-19-The-first-test-post/test1.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/03/11/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-03-11T21:31:00+09:00</published><updated>2024-03-11T21:31:00+09:00</updated><id>http://localhost:4000/jekyll/update/2024/03/11/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/03/11/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>NicoDora</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>