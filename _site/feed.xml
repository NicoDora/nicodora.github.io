<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-03-22T23:10:11+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NicoDora</title><author><name>NicoDora</name></author><entry><title type="html">NestJS를 선택한 이유 (NestJS란?)</title><link href="http://localhost:4000/nestjs/2024/03/22/NestJS%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0-(NestJS%EB%9E%80-).html" rel="alternate" type="text/html" title="NestJS를 선택한 이유 (NestJS란?)" /><published>2024-03-22T21:20:00+09:00</published><updated>2024-03-22T21:20:00+09:00</updated><id>http://localhost:4000/nestjs/2024/03/22/NestJS%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0-(NestJS%EB%9E%80?)</id><content type="html" xml:base="http://localhost:4000/nestjs/2024/03/22/NestJS%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0-(NestJS%EB%9E%80-).html"><![CDATA[<ol id="markdown-toc">
  <li><a href="#nestjs란" id="markdown-toc-nestjs란">NestJS란?</a></li>
  <li><a href="#nestjs를-선택하기-전에" id="markdown-toc-nestjs를-선택하기-전에">NestJS를 선택하기 전에</a></li>
  <li><a href="#nestjs를-선택한-이유" id="markdown-toc-nestjs를-선택한-이유">NestJS를 선택한 이유</a></li>
  <li><a href="#지금부터는" id="markdown-toc-지금부터는">지금부터는</a></li>
</ol>

<h2 id="nestjs란">NestJS란?</h2>

<p>NestJS는 효율적이고 확장 가능한 Node.js 서버 측 애플리케이션을 구축하기 위한 프레임워크입니다. 진보적인 자바스크립트를 사용하고, TypeScript로 구축되어 완전히 지원하며(순수 자바스크립트로도 가능), OOP(Object Oriented Programming)<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, FP(Functional Programming)<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>, FRP(Functional Reactive Programming)<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup>의 요소를 결합합니다.</p>

<p>내부적으로 Nest는 Express(기본값)와 같은 강력한 HTTP 서버 프레임워크를 사용하며, 선택적으로 Fastify도 사용하도록 구성할 수 있습니다!</p>

<p>Nest는 이러한 일반적인 Node.js 프레임워크(Express/Fastify)보다 높은 수준의 추상화를 제공할 뿐만 아니라 개발자에게 직접 API를 노출합니다. 따라서 개발자는 기본 플랫폼에서 사용할 수 있는 수많은 타사 모듈을 자유롭게 사용할 수 있습니다.</p>

<p><i><a href="https://docs.nestjs.com/">공식 문서</a> 참고.</i>
<br /></p>

<h2 id="nestjs를-선택하기-전에">NestJS를 선택하기 전에</h2>

<p>Modern-Agile 6기 백엔드로 활동하며 메인 프로젝트(<span style="color:#FF772B">멘보샤 프로젝트</span>)를 진행하였습니다.</p>

<p>프로젝트를 진행할 때 어떤 프레임워크를 사용할지에 대해 백엔드 팀원분들과 논의를 하였고, 결론적으로는 NestJS를 사용하기로 결정하였습니다. 그렇다면 저희가 왜 NestJS를 사용하게 되었을까요? 지금부터 그 이유를 다시 생각해보며 끄적여보겠습니다.
<br />
<br />
먼저, 모던애자일에서는 웹개발을 하고 싶은 열정은 가지고 있지만 어떻게 시작해야할지 막막한 사람들을 위해 애자일 방법론을 기반으로 웹 개발을 함께 배우는 방법을 제시하는 전문 동아리 입니다.<br />
때문에 다른 사람들도 아직 백엔드를 할지 프론트엔드를 할지조차 정하지 못한 상태로 들어오는 경우가 많아 백,프론트 두 곳에서 모두 사용할 수 있는 javascript를 사용해서 코딩테스트를 풀며 언어에 익숙해지는 시간을 갖게 되는데, 그러다보니 자연스럽게 미니 프로젝트에서는 javascript를 사용하는 node.js기반의 Express 프레임워크를 채택하게 되었습니다.
<br />
<br />
이제, 메인 프로젝트를 진행해야하는 시간이 다가왔습니다.<br />
그동안에 Express를 사용해 왔었는데 메인 프로젝트를 진행할때는 다른 프레임워크를 사용할지 아니면 Express를 계속 사용할지에 대해 논의를 하였습니다.<br />
사실 ‘새로운 프레임워크를 배우면서 동시에 프로젝트에 적용하는게 힘들지 않을까?’ 라는 두려움에 Express를 계속 사용하고 싶었지만… Express를 사용하면서 느꼈던 불편함도 해결해보고 싶었고 새로운 기술을 배우며 프로그래밍에 대한 시야를 넓히고 싶었기에 새로운 프레임워크를 사용하기로 결정하였습니다.
<br />
<br />
<br /></p>
<blockquote>
  <p><b>Express를 사용하면서 느낀 가장 큰 단점은 “하나부터 열까지 개발자가 정하고 구현해야 한다” 였습니다.</b></p>
</blockquote>

<p><br />
Express는 제약이 없어 구조가 자유롭다는 장점이 있지만, 이는 개발자가 코드를 어떻게 구조화할지에 대한 명확한 가이드라인이 없다는 것을 의미합니다. 미니 프로젝트임에도 불구하고 디자인 패턴부터 에러 핸들링, 라이프사이클 관리까지 모든 것을 개발자가 스스로 정하고 구현해야 했기에 매우 귀찮고 힘들었습니다.
<br />
개발자가 개입할 수 있는 부분이 많다는 건 결국 개발자가 해야할 일이 많아지고 오류가 발생할 확률도 높아지는 것이니까요.</p>

<p>결국 위와 같은 이유로 Express는 프로젝트 규모가 커지면 사용하기 어렵다는 결론에 도달하게 되었습니다.
<br /></p>

<h2 id="nestjs를-선택한-이유">NestJS를 선택한 이유</h2>

<p>이제 Express의 단점을 보완시켜줄 프레임워크로 NestJS를 선택한 이유에 대해 설명드리겠습니다.</p>

<p><b>1. 구조화된 아키텍처</b><br />
NestJS는 Provider, Module, Controller, Service, Middleware, Pipe, Guard, Decorator, Filter, Exception Filter 등의 요소들을 제공하며, 이러한 요소들을 조합하여 구조화된 아키텍처를 구축할 수 있습니다. 이러한 구조화된 아키텍처는 프로젝트 규모가 커질수록 코드의 가독성과 유지보수성을 높여줍니다.<br />
기능 구현하기도 바쁜 저희 팀에게는 매우 큰 장점이 될 것이라고 생각되었습니다.
<br />
<br />
<b>2. TypeScript 사용</b><br />
NestJS는 TypeScript로 쓸 것을 가정하고 만들어진 프레임워크입니다. TypeScript를 사용하면 정적 타입 검사를 통해 런타임 에러를 줄일 수 있고, 코드의 가독성을 높일 수 있습니다.
<br />
<br />
<b>3. 잘 정리되어 있는 공식 문서</b><br />
처음에 데코레이터, 파이프, 프로바이더 등의 용어가 생소했지만, 공식 문서가 잘 정리되어 있다는 점에서 NestJS를 안심하고 선택할 수 있었던 것 같습니다.
<br />
<br />
결론적으로 NestJS를 사용하여 메인 프로젝트를 진행하게 된 것이 좋은 선택이었다고 생각합니다.</p>

<h2 id="지금부터는">지금부터는</h2>
<p><del>그 뒤는 안돼 임마!</del><br />
NestJS를 사용하여 프로젝트에서 제가 구현했던 기능들부터 다른 팀원분들이 구현했던 기능들도 직접 한번 구현해보면서<br />
차근차근 포스팅 해보겠습니다! 😊</p>

<p>그럼 다음 포스트에서 뵙겠습니다 뾰로롱~
<br />
<br />
<img src="https://github.com/NicoDora/nicodora.github.io/assets/76510679/9315135e-08d4-48ac-876b-c96c3222f0e9" width="300" height="300" /></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>객체 지향 프로그래밍(Object Oriented Programming, OOP)은 컴퓨터 프로그래밍의 패러다임 중 하나로, 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 “객체”들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고 데이터를 처리할 수 있다. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>함수형 프로그래밍(Functional Programming, FP)은 계산을 수학적 함수의 평가로 간주하고 상태와 가변 데이터를 멀리하는 프로그래밍 패러다임이다. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>함수형 반응형 프로그래밍(Functional Reactive Programming, FRP)은 함수형 프로그래밍과 반응형 프로그래밍을 결합한 프로그래밍 패러다임이다. <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>NicoDora</name></author><category term="nestjs" /><summary type="html"><![CDATA[NestJS가 무엇인지 알아보고 Modern-Agile 6기 메인 프로젝트에서 왜 NestJS를 채택했는지 알아봅시다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/2024-03-22-NestJS%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0/nestjs-logo.png" /><media:content medium="image" url="http://localhost:4000/assets/img/2024-03-22-NestJS%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0/nestjs-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The first test post</title><link href="http://localhost:4000/incomplete/2024/03/19/The-first-test-post.html" rel="alternate" type="text/html" title="The first test post" /><published>2024-03-19T21:31:00+09:00</published><updated>2024-03-19T21:31:00+09:00</updated><id>http://localhost:4000/incomplete/2024/03/19/The-first-test-post</id><content type="html" xml:base="http://localhost:4000/incomplete/2024/03/19/The-first-test-post.html"><![CDATA[<p>안녕하세요?</p>

<p>첫 포스트입니다.
<br />
<br /></p>

<p><img src="/assets/img/2024-03-19-The-first-test-post/test1.jpeg" alt="test1" />
<br />
<br /></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// file: "test.ts"</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span><span class="p">,</span> <span class="nx">NotFoundException</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@nestjs/common</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">EntityManager</span><span class="p">,</span> <span class="nx">FindManyOptions</span><span class="p">,</span> <span class="nx">FindOneOptions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">typeorm</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">plainToInstance</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">class-transformer</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">QueryDeepPartialEntity</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">typeorm/query-builder/QueryPartialEntity</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/auth/enums/user-provider.enum</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserInfo</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/auth/interfaces/user-info.interface</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserBadgeRepository</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/repositories/user-badge.repository</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserIntroRepository</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/repositories/user-intro.repository</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyIntroDto</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/dtos/get-my-intro.dto</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">MyProfileResponseDTO</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/dtos/get-my-profile.dto</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserBadgeResponseDTO</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/dtos/get-user-badge.dto</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserImageRepository</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/repositories/user-image.repository</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">UserRepository</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/users/repositories/user.repository</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">User</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@src/entities/User</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">userRepository</span><span class="p">:</span> <span class="nx">UserRepository</span><span class="p">,</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">userImageRepository</span><span class="p">:</span> <span class="nx">UserImageRepository</span><span class="p">,</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">userBadgeRepository</span><span class="p">:</span> <span class="nx">UserBadgeRepository</span><span class="p">,</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="nx">userIntroRepository</span><span class="p">:</span> <span class="nx">UserIntroRepository</span><span class="p">,</span>
  <span class="p">)</span> <span class="p">{}</span>

  <span class="nf">findAll</span><span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">FindManyOptions</span><span class="o">&lt;</span><span class="nx">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">findAll</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nf">findUser</span><span class="p">(</span><span class="nx">uniqueId</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">provider</span><span class="p">:</span> <span class="nx">UserProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">findUser</span><span class="p">(</span><span class="nx">uniqueId</span><span class="p">,</span> <span class="nx">provider</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">findOneByQueryBuilderOrNotFound</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">User</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">existUser</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">findOneByQueryBuilder</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>

    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">existUser</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">NotFoundException</span><span class="p">(</span><span class="dl">'</span><span class="s1">해당 유저를 찾지 못했습니다.</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">existUser</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nf">findOneAndSelectAllByQueryBuilder</span><span class="p">(</span><span class="nx">email</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">provider</span><span class="p">:</span> <span class="nx">UserProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">findOneAndSelectAllByQueryBuilder</span><span class="p">(</span>
      <span class="nx">email</span><span class="p">,</span>
      <span class="nx">provider</span><span class="p">,</span>
    <span class="p">);</span>
  <span class="p">}</span>

  <span class="nf">findOne</span><span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">FindOneOptions</span><span class="o">&lt;</span><span class="nx">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">findOne</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">findOneByOrNotFound</span><span class="p">(</span><span class="nx">options</span><span class="p">:</span> <span class="nx">FindOneOptions</span><span class="o">&lt;</span><span class="nx">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">existUser</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nf">findOne</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>

    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">existUser</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">NotFoundException</span><span class="p">(</span><span class="dl">'</span><span class="s1">해당 유저를 찾지 못했습니다.</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">existUser</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nf">createUser</span><span class="p">(</span><span class="nx">entityManager</span><span class="p">:</span> <span class="nx">EntityManager</span><span class="p">,</span> <span class="nx">userInfo</span><span class="p">:</span> <span class="nx">UserInfo</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">createUser</span><span class="p">(</span><span class="nx">entityManager</span><span class="p">,</span> <span class="nx">userInfo</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">getMyProfile</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">userInfo</span> <span class="o">=</span> <span class="nf">plainToInstance</span><span class="p">(</span>
      <span class="nx">MyProfileResponseDTO</span><span class="p">,</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">getUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">),</span>
    <span class="p">);</span>
    <span class="kd">const</span> <span class="nx">intro</span> <span class="o">=</span> <span class="nf">plainToInstance</span><span class="p">(</span>
      <span class="nx">MyIntroDto</span><span class="p">,</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userIntroRepository</span><span class="p">.</span><span class="nf">getUserIntro</span><span class="p">(</span><span class="nx">userId</span><span class="p">),</span>
    <span class="p">)[</span><span class="mi">0</span><span class="p">];</span>

    <span class="kd">const</span> <span class="nx">image</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userImageRepository</span><span class="p">.</span><span class="nf">findUserImage</span><span class="p">(</span><span class="nx">userId</span><span class="p">))</span>
      <span class="p">.</span><span class="nx">imageUrl</span><span class="p">;</span>

    <span class="k">return</span> <span class="p">{</span> <span class="p">...</span><span class="nx">userInfo</span><span class="p">,</span> <span class="nx">image</span><span class="p">,</span> <span class="nx">intro</span> <span class="p">};</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">getMyRank</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">rank</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">getUserRank</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">badge</span> <span class="o">=</span> <span class="nf">plainToInstance</span><span class="p">(</span>
      <span class="nx">UserBadgeResponseDTO</span><span class="p">,</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userBadgeRepository</span><span class="p">.</span><span class="nf">getUserBadges</span><span class="p">(</span><span class="nx">userId</span><span class="p">),</span>
    <span class="p">);</span>

    <span class="k">return</span> <span class="p">{</span> <span class="nx">rank</span><span class="p">,</span> <span class="nx">badge</span> <span class="p">};</span>
  <span class="p">}</span>

  <span class="nf">getUserInfo</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">getUserInfo</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">getMyInfoWithOwner</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">targetId</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">email</span><span class="p">,</span> <span class="nx">role</span><span class="p">,</span> <span class="nx">provider</span> <span class="p">}</span> <span class="o">=</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">getUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">userImage</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userImageRepository</span><span class="p">.</span><span class="nf">findUserImage</span><span class="p">(</span><span class="nx">userId</span><span class="p">))</span>
      <span class="p">.</span><span class="nx">imageUrl</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="nx">userId</span><span class="p">,</span>
      <span class="nx">name</span><span class="p">,</span>
      <span class="nx">email</span><span class="p">,</span>
      <span class="nx">role</span><span class="p">,</span>
      <span class="nx">provider</span><span class="p">,</span>
      <span class="nx">userImage</span><span class="p">,</span>
      <span class="na">owner</span><span class="p">:</span> <span class="nx">userId</span> <span class="o">===</span> <span class="nx">targetId</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="nf">updateUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">partialEntity</span><span class="p">:</span> <span class="nx">QueryDeepPartialEntity</span><span class="o">&lt;</span><span class="nx">User</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">updateUser</span><span class="p">(</span><span class="nx">userId</span><span class="p">,</span> <span class="nx">partialEntity</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nf">countPageMentors</span><span class="p">(</span><span class="nx">categoryId</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">limit</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">categoryId</span>
      <span class="p">?</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">countMentorsInCategory</span><span class="p">(</span><span class="nx">categoryId</span><span class="p">)</span>
      <span class="p">:</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepository</span><span class="p">.</span><span class="nf">countMentors</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">total</span> <span class="o">/</span> <span class="nx">limit</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">totalPage</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="nx">page</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">{</span> <span class="nx">total</span><span class="p">,</span> <span class="nx">totalPage</span> <span class="p">};</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>NicoDora</name></author><category term="incomplete" /><summary type="html"><![CDATA[첫 포스트 테스트 중]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/2024-03-19-The-first-test-post/test1.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/img/2024-03-19-The-first-test-post/test1.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/03/11/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-03-11T21:31:00+09:00</published><updated>2024-03-11T21:31:00+09:00</updated><id>http://localhost:4000/jekyll/update/2024/03/11/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/03/11/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>NicoDora</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>